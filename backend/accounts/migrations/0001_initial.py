# Generated by Django 5.2.4 on 2025-10-12 03:34

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(max_length=254, unique=True, validators=[django.core.validators.EmailValidator(message='Enter a valid email address')])),
                ('first_name', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator(message='This field can only contain letters, spaces, and hyphens.', regex='^[A-Za-z\\s\\-]+$')])),
                ('last_name', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator(message='This field can only contain letters, spaces, and hyphens.', regex='^[A-Za-z\\s\\-]+$')])),
                ('is_active', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('role', models.CharField(choices=[('customer', 'Customer'), ('promoter', 'Promoter'), ('admin', 'Admin'), ('investor', 'Investor')], default='customer', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('social_auth_pro_pic', models.URLField(blank=True, null=True)),
                ('custom_user_profile', models.URLField(blank=True, max_length=500, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be a valid Indian number. Examples: '+919876543210', '09876543210', '9876543210'.", regex='^(\\+91[\\-\\s]?|0)?[6-9]\\d{9}$')])),
                ('address', models.TextField(blank=True, null=True)),
                ('pincode', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Pincode must be a valid 6-digit Indian pincode.', regex='^[1-9][0-9]{5}$')])),
                ('district', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='This field can only contain letters, spaces, and hyphens.', regex='^[A-Za-z\\s\\-]+$')])),
                ('city', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='This field can only contain letters, spaces, and hyphens.', regex='^[A-Za-z\\s\\-]+$')])),
                ('state', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='This field can only contain letters, spaces, and hyphens.', regex='^[A-Za-z\\s\\-]+$')])),
                ('last_activation_email_sent', models.DateTimeField(blank=True, null=True)),
                ('blocked_until', models.DateTimeField(blank=True, null=True)),
                ('block_count', models.PositiveIntegerField(default=0)),
                ('is_permanently_banned', models.BooleanField(default=False)),
                ('last_password_reset_sent', models.DateTimeField(blank=True, null=True)),
                ('blocked_until_password_reset', models.DateTimeField(blank=True, null=True)),
                ('block_count_password_reset', models.PositiveIntegerField(default=0)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('auth_provider', models.CharField(choices=[('email', 'Email'), ('google', 'Google'), ('facebook', 'Facebook')], default='email', max_length=50)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PasswordResetEmailLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='password_reset_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-sent_at'],
            },
        ),
        migrations.CreateModel(
            name='ActivationEmailLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['user', 'sent_at'], name='accounts_ac_user_id_36c64a_idx')],
            },
        ),
    ]
